<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The 17th Zhejiang Provincial Collegiate Programming Contest</title>
    <url>/2021/02/22/The-17th-Zhejiang-Provincial-Collegiate-Programming-Contest/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">solved</th>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">D</th>
<th align="center">E</th>
<th align="center">F</th>
<th align="center">G</th>
<th align="center">H</th>
<th align="center">I</th>
<th align="center">J</th>
<th align="center">K</th>
<th align="center">L</th>
</tr>
</thead>
<tbody><tr>
<td align="center">6 / 11</td>
<td align="center">O</td>
<td align="center">Ø</td>
<td align="center">Ø</td>
<td align="center">·</td>
<td align="center">Ø</td>
<td align="center">·</td>
<td align="center">·</td>
<td align="center">·</td>
<td align="center">O</td>
<td align="center">·</td>
<td align="center">O</td>
<td align="center">·</td>
</tr>
</tbody></table>
<ul>
<li>O：比赛时通过</li>
<li>Ø：赛后通过</li>
<li>!：比赛时尝试了未通过</li>
<li>·：比赛时未尝试</li>
</ul>
<p><strong>REPLY</strong> ： 由于自己的读题失误给队友造成了很大的麻烦，抱歉。-Sstee1XD</p>
<h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a><a href="https://codeforces.com/gym/102770">比赛链接</a></h2><span id="more"></span>

<h1 id="A-AD-2020"><a href="#A-AD-2020" class="headerlink" title="A. AD 2020"></a>A. AD 2020</h1><p>solved by Tryna &amp; Sstee1XD. 1:44(+1)</p>
<p><strong>题意</strong> 给你起始日期和终止日期，问你其中有多少个日期构成的字符串中包含<code>202</code>。</p>
<p><strong>题解</strong> 预处理下前缀和，然后处理下边边角角。</p>
<details>
    <summary>AC代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10005</span>], y1, m1, d1, y2, m2, d2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y / <span class="number">1000</span> == <span class="number">2</span> &amp;&amp; y / <span class="number">100</span> % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; y / <span class="number">10</span> % <span class="number">10</span> == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (y / <span class="number">100</span> % <span class="number">10</span> == <span class="number">2</span> &amp;&amp; y / <span class="number">10</span> % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">10</span> == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2000</span>; i &lt;= <span class="number">9999</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (checkY(i)) &#123;</span><br><span class="line">            num[i] = <span class="number">365</span> + checkLeap(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">2</span>) num[i] = <span class="number">29</span> + checkLeap(i);</span><br><span class="line">        <span class="keyword">else</span> num[i] = <span class="number">2</span>;</span><br><span class="line">        num[i] += num[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkY(y)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">3</span> || i == <span class="number">5</span> || i == <span class="number">7</span> || i == <span class="number">8</span> || i == <span class="number">10</span>) res += <span class="number">31</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) res += <span class="number">28</span> + checkLeap(y);</span><br><span class="line">            <span class="keyword">else</span> res += <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += d;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y % <span class="number">10</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">2</span>) res += <span class="number">28</span> + checkLeap(y);</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">2</span>) res += d;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">12</span>) res += (d &gt;= <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">2</span>) res += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">2</span>) res += (d &gt;= <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">12</span>) res += (d &gt;= <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; y1 &gt;&gt; m1 &gt;&gt; d1 &gt;&gt; y2 &gt;&gt; m2 &gt;&gt; d2;</span><br><span class="line">    ans = num[y2 - <span class="number">1</span>] - num[y1 - <span class="number">1</span>];</span><br><span class="line">    ans += add(y2, m2, d2) - add(y1, m1, d1);</span><br><span class="line">    <span class="keyword">if</span> (checkY(y1) || (y1 % <span class="number">10</span> == <span class="number">2</span> &amp;&amp; m1 == <span class="number">2</span>) || (m1 == <span class="number">2</span> &amp;&amp; d1 == <span class="number">2</span>) || (m1 == <span class="number">12</span> &amp;&amp; d1 == <span class="number">2</span>)) ans += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; _T;</span><br><span class="line">    <span class="keyword">while</span> (_T--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<hr>
<h1 id="B-Bin-Packing-Problem"><a href="#B-Bin-Packing-Problem" class="headerlink" title="B. Bin Packing Problem"></a>B. Bin Packing Problem</h1><p>solved by Sstee1XD. (-)</p>
<p><strong>题意</strong>：给你$n$个物品和它们的体积，还有容量为$C$的集装箱，要求按它给你的顺序放在集装箱里。现有两种方案。</p>
<ul>
<li>第一种：每次在现有的集装箱里从左到右扫一遍，放到第一个能放进去的集装箱里，如果没有则在最右边加一个集装箱放。</li>
<li>第二种：每次在现有的集装箱里选择剩余容量最接近当前物品的集装箱，如果没有则在最右边加一个集装箱放。</li>
</ul>
<p>输出两种方案下使用集装箱的数量。</p>
<p><strong>题解</strong>：对于两种方案来说，遍历肯定会超时。对于第一种方案，因为要找能放下的最左边的箱子，所以用<code>线段树</code>来维护区间最大值，每次都优先去左子树。<br>对于第二种方案，我们要找容量大于等于当前物品体积且最接近的集装箱，很容易想到去<code>二分</code>顺序排列的容器来实现。为了实现有序，选择用<code>multiset</code>来存储数据，比在$set$里用结构体会方便很多。</p>
<details>
    <summary>AC代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, c, ans, a[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		t[id] = max(t[id &lt;&lt; <span class="number">1</span>], t[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">		t[id] = c;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		build(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">		build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>,  r);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">			<span class="keyword">if</span> (t[id] == c) ans++;</span><br><span class="line">			t[id] -= v;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (t[id &lt;&lt; <span class="number">1</span>] &gt;= v) modify(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">		<span class="keyword">else</span> modify(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">		up(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; c;</span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	seg.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		seg.modify(<span class="number">1</span>, <span class="number">1</span>, n, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	st.clear();</span><br><span class="line">	<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; :: iterator it;</span><br><span class="line">	st.insert(c - a[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		it = st.lower_bound(a[i]);</span><br><span class="line">		<span class="keyword">if</span> (it == st.end()) &#123;</span><br><span class="line">			st.insert(c - a[i]);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> v = *it - a[i];</span><br><span class="line">		st.erase(it);</span><br><span class="line">		st.insert(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);<span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> _T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; _T;</span><br><span class="line">	<span class="keyword">while</span> (_T--) solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="C-Crossword-Validation"><a href="#C-Crossword-Validation" class="headerlink" title="C. Crossword Validation"></a>C. Crossword Validation</h1><p>solved by SsteelXD. (-)</p>
<p><strong>题意</strong>：给你一个$n * n$的矩阵和m个单词以及单词的权值，问矩阵中横着和竖着的，有#隔开的极长单词是否都在给你$m$个单词中出现过，以及它们的权值和是多少。</p>
<p><strong>题解</strong>：用字典树来记录$m$个单词以及它们的权值，之后遍历矩阵查找。</p>
<details>
    <summary>AC代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maps[<span class="number">1010</span>][<span class="number">1010</span>], tmp[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nx[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">int</span> cnt;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">memset</span>(nx, <span class="number">-1</span>, <span class="keyword">sizeof</span> nx);</span><br><span class="line">            v = <span class="number">0</span>;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;t[maxn];</span><br><span class="line">    <span class="keyword">int</span> root, tot;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        t[tot].init();</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        root = newnode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[now].nx[s[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">                t[now].nx[s[i] - <span class="string">&#x27;a&#x27;</span>] = newnode();</span><br><span class="line">            &#125;</span><br><span class="line">            now = t[now].nx[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        t[now].v += v;</span><br><span class="line">        t[now].cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (t[now].nx[ch] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            now = t[now].nx[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t[now].cnt == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> t[now].v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;trie;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (maps[i][j] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (maps[i][j] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; j &lt;= n) &#123;</span><br><span class="line">                tmp[len++] = maps[i][j++];</span><br><span class="line">            &#125;</span><br><span class="line">            tmp[len] = <span class="number">0</span>;</span><br><span class="line">            ll now = trie.query(tmp);</span><br><span class="line">            <span class="keyword">if</span> (now == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            res += now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (maps[i][j] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (maps[i][j] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; i &lt;= n) &#123;</span><br><span class="line">                tmp[len++] = maps[i++][j];</span><br><span class="line">            &#125;</span><br><span class="line">            tmp[len] = <span class="number">0</span>;</span><br><span class="line">            ll now = trie.query(tmp);</span><br><span class="line">            <span class="keyword">if</span> (now == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            res += now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    trie.init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, maps[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, tmp, &amp;v);</span><br><span class="line">        trie.insert(tmp, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, gao());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_T);</span><br><span class="line">    <span class="keyword">while</span> (_T--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<hr>
<h1 id="E-Easy-DP-Problem"><a href="#E-Easy-DP-Problem" class="headerlink" title="E. Easy DP Problem"></a>E. Easy DP Problem</h1><p>sloved by Tryna. (-)</p>
<p><strong>题解:</strong> 根据dp公式，容易得出最后的答案为 $\sum_{i=1}^{r-l+1} i^2$ + 前<strong>k</strong>大之和，前面一个平方和为$n * (n + 1) * (2n + 1) / 6$，后面前k大之和可以用主席树维护</p>
<details>
    <summary>AC代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], t, n, q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> cnt, root[N];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    ll sum;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;hjt[N * <span class="number">40</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> lower_bound(v.begin(), v.end(), x) - v.begin() + <span class="number">1</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> &amp;now, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    now = ++cnt;</span><br><span class="line">    hjt[now] = hjt[pre];</span><br><span class="line">    hjt[now].num++; hjt[now].sum += val;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        hjt[now].val = val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= m) insert(hjt[pre].l, hjt[now].l, l, m, p, val);</span><br><span class="line">    <span class="keyword">else</span> insert(hjt[pre].r, hjt[now].r, m + <span class="number">1</span>, r, p, val);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> hjt[R].val * k;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = hjt[hjt[R].r] .num - hjt[hjt[L].r].num;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= tmp) <span class="keyword">return</span> query(hjt[L].r, hjt[R].r, m + <span class="number">1</span>, r, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> hjt[hjt[R].r].sum - hjt[hjt[L].r].sum + query(hjt[L].l, hjt[R].l, l, m, k - tmp);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    v.clear();</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        v.push_back(a[i]); root[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    v.erase(unique(v.begin(), v.end()), v.end());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	init(n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = getid(a[i]);</span><br><span class="line">        insert(root[i - <span class="number">1</span>], root[i], <span class="number">1</span>, n, t, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> l, r, k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">		<span class="keyword">int</span> u = r - l + <span class="number">1</span>;</span><br><span class="line">		ll ans = query(root[l - <span class="number">1</span>], root[r], <span class="number">1</span>, n, k);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (<span class="number">1ll</span>) * u * (u + <span class="number">1</span>) * (<span class="number">2</span> * u + <span class="number">1</span>) / <span class="number">6</span> + ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">		run();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</details>

<hr>
<h1 id="K-Killing-the-Brute-force"><a href="#K-Killing-the-Brute-force" class="headerlink" title="K. Killing the Brute-force"></a>K. Killing the Brute-force</h1><p>solved by Tryna.00:14(+)</p>
<p>签到题</p>
<details>
    <summary>AC代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>((<span class="keyword">double</span>)(<span class="number">-1</span>));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> moven1[<span class="number">10</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;&#125;; </span><br><span class="line"><span class="keyword">int</span> moven2[<span class="number">10</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> t, n, a[maxn], b[maxn];  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            a[i] = a[i] * <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">            <span class="keyword">if</span>(p) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; b[i]) p = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<hr>
<h1 id="I-Invoking-the-Magic"><a href="#I-Invoking-the-Magic" class="headerlink" title="I.Invoking the Magic"></a>I.Invoking the Magic</h1><p>solved by lllllan.01:28(+1)</p>
<p><strong>题意：</strong> 现有$n$双袜子，但是被混合起来了，即一组袜子中可能是两只不同的袜子。宝宝有魔法能够将$k$组袜子重新匹配，使得这$k$组袜子中相同的袜子分到一起。要求是这$k$组中的袜子必须能够匹配，不能出现单只独一无二的袜子。求能够将所有袜子重新匹配的最小$k$。</p>
<p><strong>题解：</strong> 只有$1e5$双袜子，但是袜子的编号却是叛逆的$2^{30}$，所以需要离散化一下，当时的第一反应就是用$map$来重新赋予编号，交一发就直接$T$了嘞。最后靠队友改成了$unordered_map$就过了.</p>
<details>
    <summary>AC代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _T, n, a, b, maxsize;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; s, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;	maxsize = <span class="number">0</span>; s.clear(), num.clear();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;	<span class="keyword">return</span> s[x] == x ? x : s[x] = find(s[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;	<span class="keyword">if</span>(s[a] == <span class="number">0</span>) &#123; s[a] = a; num[a] = <span class="number">1</span>;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">un</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	a = find(a), b = find(b);</span><br><span class="line">	<span class="keyword">if</span>(a == b)	<span class="keyword">return</span> ;</span><br><span class="line">	s[b] = a, num[a] += num[b];</span><br><span class="line">	<span class="keyword">if</span>(num[a] &gt; maxsize) maxsize = num[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">		check(a);</span><br><span class="line">		check(b);</span><br><span class="line">		un(a, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, maxsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_T);</span><br><span class="line">	<span class="keyword">while</span>(_T--) run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
  </entry>
  <entry>
    <title>first blog / 博客初建起</title>
    <url>/2021/02/22/first-blog/</url>
    <content><![CDATA[<p><sub>折腾了一个上午，才算是搭建了一个简陋的个人博客。<br>为了防止过两天连自己的博客都更新不了的意外发生，这里<del>记录</del>搬运一些hexo的指令。Orz</sub></p>
<p>小白第一步，win+r，打开cmd。<del>到目录D/blog/下开始。</del> 这是我自己的文件位置。</p>
<span id="more"></span>

<h1 id="Yelee主题使用说明"><a href="#Yelee主题使用说明" class="headerlink" title="Yelee主题使用说明"></a><a href="http://moxfive.xyz/yelee/">Yelee主题使用说明</a></h1><h1 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;博客名&quot;</span><br></pre></td></tr></table></figure>
<p>引号中当然是你希望新建的文章的标题了，然后就会在/source/_posts/目录下为你新建一个同名的md文件。</p>
<p>新建文章模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My awesome title</span><br><span class="line">date: 2016-10-12 18:38:45</span><br><span class="line">categories: </span><br><span class="line">    - 分类1</span><br><span class="line">    - 分类2</span><br><span class="line">tags: </span><br><span class="line">    - 标签1</span><br><span class="line">    - 标签2</span><br><span class="line">mp3: http:&#x2F;&#x2F;domain.com&#x2F;awesome.mp3</span><br><span class="line">cover: http:&#x2F;&#x2F;domain.com&#x2F;awesome.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="开始写博客"><a href="#开始写博客" class="headerlink" title="开始写博客"></a>开始写博客</h1><p>有vim或者notepad的，可以直接用命令语句打开，形如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim 博客名.md</span><br><span class="line">notepad 博客名.md</span><br></pre></td></tr></table></figure>
<p>其实没有这两个软件也没关系，txt下写也是一样的【/doge】。反正根据自己的喜好和需求，有一个能过比较顺手地写markdown的软件即可，然后根据/source/_posts/目录找到该文章然后进行编写即可。</p>
<h1 id="文章写好部署网站"><a href="#文章写好部署网站" class="headerlink" title="文章写好部署网站"></a>文章写好部署网站</h1><p>生成静态文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>部署网站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h1 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h1><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>【Fahaxiki！】的训练实录</title>
    <url>/2021/02/22/%E3%80%90Fahaxiki%EF%BC%81%E3%80%91%E7%9A%84%E8%AE%AD%E7%BB%83%E5%AE%9E%E5%BD%95/</url>
    <content><![CDATA[<p><strong>队霸：</strong><a href="https://me.csdn.net/ssteelxd">Sstee1XD</a> <strong>主代码手：</strong><a href="https://me.csdn.net/weixin_47900150">Tryna</a> <strong>后勤保障人员：</strong><a href="https://blog.csdn.net/m0_46187157">lllllan</a></p>
<p>【Some considerations】</p>
<ul>
<li><strong>读题。</strong> 已经不是第一次，代码写好，提交，修改，如此”努力“了半天之后，发现题意读错了。<strong>当一个人上机的时候，其他人不要着急读新题，至少留一个人再确认一下题意，然后帮忙思考一些极端情况、提供一些测试样例。</strong></li>
<li><strong>尽量避免一个人陷进去。</strong> 一方面是整体的知识储备不够，遇到有些题目可能只有一个人能做，但是任由一个人单挑又具有很大难度，<strong>除了做题补提还要留一些时间填补知识空缺，尽量保证一道题有两个人可以相互讨论，确保思路的正确性和代码的可行性。</strong> 另一方面是训练不够，以及意气用事，做不出来还行死磕，<strong>比赛初阶段，尽量避免长时间陷入一道题无法自拔，队友劝退让其读新题；比赛后期可以全队一起攻克。</strong></li>
<li>打比赛时一定一定不能传递负能量，题目wa了没有关系，千万不能说<strong>完了完了</strong>之类的话</li>
<li>实在找不到自己的错误，请考虑及时让队友重写。</li>
</ul>
<hr>
<span id="more"></span>

<p>后续内容待博客搬家后更新</p>
]]></content>
  </entry>
</search>
